'use client'
import { Welcome } from '../components/Welcome/Welcome';
import { ColorSchemeToggle } from '../components/ColorSchemeToggle/ColorSchemeToggle';
import Flag from 'react-world-flags'
import { useState, useEffect } from 'react';
import { Box, TextInput, Center, Alert, Title } from '@mantine/core';
import { Button } from '@mantine/core';
import { Text } from '@mantine/core';
import { IconInfoCircle }  from '@tabler/icons-react';
import { COUNTRY_DATA } from './components/country_data';
  
const getRandomArbitrary = (min: number, max: number) => {
    return Math.random() * (max - min) + min;
}

const getRandomCountry = () => {
  
  const country = Math.trunc(getRandomArbitrary(0,COUNTRY_DATA.length-1));
  return COUNTRY_DATA[country];
}




export default function HomePage() {
  const [country, setCountry] = useState(getRandomCountry());
  const [inputValue, setInputValue] = useState("");
  const [message,setMessage] = useState('');

  const icon = <IconInfoCircle />;

  const delay = (ms:any) => new Promise(res => setTimeout(res, ms));
  

  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);


const validateAnswer = () => {
  
  if (Number(inputValue) == Number(country.numeric))
    return true;
  if (inputValue.toLowerCase() == country.name.toLowerCase())
    return true;
  if (inputValue.toLowerCase() == country.alpha2.toLowerCase())
    return true;
  if (inputValue.toLowerCase() == country.alpha3.toLowerCase())
    return true;
  return false;
}

  const checkCountry = () => {
    const answerCheck = validateAnswer()
    if(answerCheck){
     // alert("Correct");
      setMessage('Correct')
      setCountry(getRandomCountry())
    }
    else{ 
     // alert("Wrong")
      setMessage('Wrong')
    }
    setInputValue("");
    return answerCheck;
  }

  const handleMessage = (message : string)=>{
    if(message == 'Correct'){
      return <Alert variant="light" color="green" title="Correct" icon={icon}>
      Way to go!
    </Alert>
    }
    if(message == 'Wrong')
      return <Alert variant="light" color="red" title="Wrong" icon={icon}>
      That's not it...
    </Alert>
    return "";
  }
  return (
    <>
    {isClient && <Box>
    <Center style={{margin: "40px"}}><Title order={1}>What country is this?</Title></Center>
    <Center style={{margin: "20px"}}>
      <Center maw={400} h={100}>
        <Flag  code={country.numeric} height="150rem" />
      </Center>
      
    </Center>
      <Center><Box>
          <Center maw={400} h={100}>
              <Box>
                
                <TextInput 
                size="xxl"
                value={inputValue} 
                placeholder={ country.numeric +": " + country.name }
                onChange={ (input) => {
                  setInputValue(input.target.value)
                  setMessage("");
                  
                }}
                onKeyDown={(key) => {

                  if(key.code == 'Enter'){
                    checkCountry();
                  }
                }}
                />
                </Box>
            
            <Button onClick={ () => {
              alert(inputValue +": "+country.name)
             checkCountry();
            }}>Send</Button>
          </Center>
          <Box>{handleMessage(message)}</Box>
        </Box></Center>
        </Box>}
    </>
      
    
    
  );
}